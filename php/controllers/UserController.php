<?php

namespace app\controllers;

use app\models\SignupForm;
use app\models\User;
use Yii;
use app\models\Company;
use yii\data\ActiveDataProvider;
use yii\web\Controller;
use yii\web\HttpException;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;

/**
 * CompanyController implements the CRUD actions for Company model.
 */
class UserController extends Controller
{
    /**
     * {@inheritdoc}
     */
    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['POST'],
                ],
            ],
        ];
    }

    public function beforeAction($action)
    {
        if (!\Yii::$app->user->isLeadManager) {
            throw new HttpException(403, 'У вас нет доступа к этой странице');
        }
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    /**
     * Lists all Company models.
     * @return mixed
     */
    public function actionIndex()
    {
        $dataProvider = new ActiveDataProvider([
            'query' => User::find()->where(['company_id' => \Yii::$app->user->companyId, 'status' => User::STATUS_ACTIVE])
        ]);

        return $this->render('index', [
            'dataProvider' => $dataProvider,
        ]);
    }

    /**
     * Creates a new Company model.
     * If creation is successful, the browser will be redirected to the 'redirect' page.
     * @return mixed
     */
    public function actionCreate()
    {
        $signupForm = new SignupForm();
        $signupForm->scenario = 'dealerSignup';

        if ($signupForm->load(Yii::$app->request->post())) {
            $signupForm->company_id = \Yii::$app->user->companyId;
            if ($user = $signupForm->signup()) {
                if ($signupForm->role == User::ROLE_LEAD_MANAGER) {
                    $role = 'leadManager';
                } else {
                    $role = 'manager';
                }
                $auth = Yii::$app->authManager;
                $authorRole = $auth->getRole($role);
                $auth->assign($authorRole, $user->getId());

                $this->redirect(['index']);
            }
        }

        return $this->render('create', [
            'signupForm' => $signupForm
        ]);
    }

    public function actionUpdate($id)
    {
        $user = User::findOne($id);
        if (!$user) {
            throw new HttpException(404, 'Пользователь не найден');
        }
        $signupForm = new SignupForm();
        $signupForm->scenario = 'editUser';
        $signupForm->initByUser($user);
        $userCompany = $user->company;

        if ($signupForm->load(Yii::$app->request->post())) {
            if ($user = $signupForm->saveWithAssignedUser()) {
                $auth = Yii::$app->authManager;
                $userRoles = $auth->getRolesByUser($user->id);
                foreach ($userRoles as $userRole) {
                    $auth->revoke($userRole, $user->id);
                }
                if ($signupForm->role == User::ROLE_LEAD_MANAGER) {
                    $role = 'leadManager';
                } else {
                    $role = 'manager';
                }
                $authorRole = $auth->getRole($role);
                $auth->assign($authorRole, $user->getId());

                $this->redirect(['view', 'id' => $signupForm->company_id]);
            }
        }

        return $this->render('update', [
            'signupForm' => $signupForm
        ]);
    }

    /**
     * Deletes an existing User model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionDelete($id)
    {
        $user = $this->findModel($id);
        $user->status = User::STATUS_DELETED;
        $user->update(false, ['status']);

        return $this->redirect(['index']);
    }

    /**
     * Finds the Company model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return User the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = User::findOne($id)) !== null) {
            return $model;
        }

        throw new NotFoundHttpException('The requested page does not exist.');
    }
}
